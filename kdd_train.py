import datetime
import gc
import numpy
import json
import lightgbm
import math
import pandas
import pickle
import random
import resource

軟, 硬 = resource.getrlimit(resource.RLIMIT_AS)
resource.setrlimit(resource.RLIMIT_AS, (35 * 1024 * 1024 * 1024, 硬))

目錄 = ""
def train():
	print(str(datetime.datetime.now()) + "\t開始")


	def 取得城市(經度, 緯度):
		if 緯度 >= 38:
			return 1
		if 緯度 >= 29 and 緯度 < 33:
			return 2
		if 緯度 >= 22.9 and 緯度 < 25:
			return 3
		if 緯度 < 22.9 and 經度 < 113.72:
			return 3
		if 緯度 < 22.9 and 經度 >= 113.72:
			return 4

		return 0


	def 計算距離(經度甲, 緯度甲, 經度乙, 緯度乙):
		甲 = math.sin(math.pi * (緯度甲 - 緯度乙) / 360) ** 2
		乙 = math.sin(math.pi * (經度甲 - 經度乙) / 360) ** 2
		丙 = math.cos(math.pi * 緯度甲 / 180)
		丁 = math.cos(math.pi * 緯度乙 / 180)

		return 2 * 6378137 * math.asin((甲 + 乙 * 丙 * 丁) ** 0.5)


	用戶表 = pandas.read_csv(目錄 + "data/profiles.csv", dtype=numpy.int32)
	用戶表 = 用戶表.rename({"pid": "用戶標識"}, axis=1)

	測試查詢表 = pandas.read_csv(目錄 + "data/test_queries.csv", header=0, names=["會話標識", "用戶標識", "請求時間", "起點", "終點"], dtype={"會話標識": numpy.int32, "用戶標識": numpy.float32, "請求時間": object, "起點": object, "終點": object})
	測試查詢表 = 測試查詢表.fillna(-1)
	測試查詢表["用戶標識"] = 測試查詢表.用戶標識.astype(numpy.int32)
	測試查詢表["請求秒序"] = pandas.Series([datetime.datetime.strptime(子, "%Y-%m-%d %H:%M:%S").timestamp() for 子 in 測試查詢表.請求時間]).astype(numpy.int32)
	測試查詢表["請求曜日"] = (823543 + (測試查詢表.請求秒序 - 57600 - 14400) // 86400) % 7
	測試查詢表["請求日序"] = (測試查詢表.請求秒序 - 57600) // 86400 - 17865
	測試查詢表["請求時序"] = (測試查詢表.請求秒序 - 57600) // 3600 - 428760
	測試查詢表["起點經度"] = pandas.Series([子.split(",")[0] for 子 in 測試查詢表.起點], dtype=numpy.float32)
	測試查詢表["起點緯度"] = pandas.Series([子.split(",")[1] for 子 in 測試查詢表.起點], dtype=numpy.float32)
	測試查詢表["終點經度"] = pandas.Series([子.split(",")[0] for 子 in 測試查詢表.終點], dtype=numpy.float32)
	測試查詢表["終點緯度"] = pandas.Series([子.split(",")[1] for 子 in 測試查詢表.終點], dtype=numpy.float32)
	測試查詢表["起終距離"] = pandas.Series([計算距離(起點經度, 起點緯度, 終點經度, 終點緯度) for 起點經度, 起點緯度, 終點經度, 終點緯度 in zip(測試查詢表.起點經度, 測試查詢表.起點緯度, 測試查詢表.終點經度, 測試查詢表.終點緯度)]).astype(numpy.float32)
	測試查詢表["城市"] = pandas.Series([取得城市(經度, 緯度) for 經度, 緯度 in zip(測試查詢表.起點經度, 測試查詢表.起點緯度)]).astype(numpy.int16)
	測試查詢表["城市用戶標識"] = [str(城市) + "_" + str(用戶標識) for 城市, 用戶標識 in zip(測試查詢表.城市, 測試查詢表.用戶標識)]
	測試查詢表 = 測試查詢表.drop(["請求時間"], axis=1)

	測試計劃表 = pandas.read_csv(目錄 + "data/test_plans.csv", header=0, names=["會話標識", "計劃時間", "計劃清單"], dtype={"會話標識": numpy.int32, "計劃時間": object, "計劃清單": object})
	測試計劃表["計劃秒序"] = pandas.Series([datetime.datetime.strptime(子, "%Y-%m-%d %H:%M:%S").timestamp() for 子 in 測試計劃表.計劃時間], dtype=numpy.int32)
	測試計劃表 = 測試計劃表.drop(["計劃時間"], axis=1)

	測試表 = 測試查詢表
	測試表 = 測試表.merge(測試計劃表, on="會話標識", how="left")
	del 測試查詢表
	del 測試計劃表

	訓練查詢表 = pandas.concat([
		pandas.read_csv(目錄 + "data/train_queries_phase1.csv", header=0, names=["會話標識", "用戶標識", "請求時間", "起點", "終點"], dtype={"會話標識": numpy.int32, "用戶標識": numpy.float32, "請求時間": object, "起點": object, "終點": object})
		, pandas.read_csv(目錄 + "data/train_queries_phase2.csv", header=0, names=["會話標識", "用戶標識", "請求時間", "起點", "終點"], dtype={"會話標識": numpy.int32, "用戶標識": numpy.float32, "請求時間": object, "起點": object, "終點": object})
	]).reset_index(drop=True)
	訓練查詢表 = 訓練查詢表.fillna(-1)
	訓練查詢表["用戶標識"] = 訓練查詢表.用戶標識.astype(numpy.int32)
	訓練查詢表["請求秒序"] = pandas.Series([datetime.datetime.strptime(子, "%Y-%m-%d %H:%M:%S").timestamp() for 子 in 訓練查詢表.請求時間]).astype(numpy.int32)
	訓練查詢表["請求曜日"] = (823543 + (訓練查詢表.請求秒序 - 57600 - 14400) // 86400) % 7
	訓練查詢表["請求日序"] = (訓練查詢表.請求秒序 - 57600) // 86400 - 17865
	訓練查詢表["請求時序"] = (訓練查詢表.請求秒序 - 57600) // 3600 - 428760
	訓練查詢表["起點經度"] = pandas.Series([子.split(",")[0] for 子 in 訓練查詢表.起點], dtype=numpy.float32)
	訓練查詢表["起點緯度"] = pandas.Series([子.split(",")[1] for 子 in 訓練查詢表.起點], dtype=numpy.float32)
	訓練查詢表["終點經度"] = pandas.Series([子.split(",")[0] for 子 in 訓練查詢表.終點], dtype=numpy.float32)
	訓練查詢表["終點緯度"] = pandas.Series([子.split(",")[1] for 子 in 訓練查詢表.終點], dtype=numpy.float32)
	訓練查詢表["起終距離"] = pandas.Series([計算距離(起點經度, 起點緯度, 終點經度, 終點緯度) for 起點經度, 起點緯度, 終點經度, 終點緯度 in zip(訓練查詢表.起點經度, 訓練查詢表.起點緯度, 訓練查詢表.終點經度, 訓練查詢表.終點緯度)], dtype=numpy.float32)
	訓練查詢表["城市"] = pandas.Series([取得城市(經度, 緯度) for 經度, 緯度 in zip(訓練查詢表.起點經度, 訓練查詢表.起點緯度)], dtype=numpy.int16)
	訓練查詢表["城市用戶標識"] = [str(城市) + "_" + str(用戶標識) for 城市, 用戶標識 in zip(訓練查詢表.城市, 訓練查詢表.用戶標識)]
	訓練查詢表 = 訓練查詢表.drop(["請求時間"], axis=1)

	訓練點擊表 = pandas.concat([
		pandas.read_csv(目錄 + "data/train_clicks_phase1.csv", header=0, names=["會話標識", "點擊時間", "點擊方式"], dtype={"會話標識": numpy.int32, "計劃時間": object, "計劃清單": object})
		, pandas.read_csv(目錄 + "data/train_clicks_phase2.csv", header=0, names=["會話標識", "點擊時間", "點擊方式"], dtype={"會話標識": numpy.int32, "計劃時間": object, "計劃清單": object})
	]).reset_index(drop=True)
	訓練點擊表["點擊秒序"] = pandas.Series([datetime.datetime.strptime(子, "%Y-%m-%d %H:%M:%S").timestamp() for 子 in 訓練點擊表.點擊時間], dtype=numpy.int32)
	訓練點擊表 = 訓練點擊表.drop(["點擊時間"], axis=1)

	訓練計劃表 = pandas.concat([
		pandas.read_csv(目錄 + "data/train_plans_phase1.csv", header=0, names=["會話標識", "計劃時間", "計劃清單"], dtype={"會話標識": numpy.int32, "計劃時間": object, "計劃清單": object})
		, pandas.read_csv(目錄 + "data/train_plans_phase2.csv", header=0, names=["會話標識", "計劃時間", "計劃清單"], dtype={"會話標識": numpy.int32, "計劃時間": object, "計劃清單": object})
	]).reset_index(drop=True)
	訓練計劃表["計劃秒序"] = pandas.Series([datetime.datetime.strptime(子, "%Y-%m-%d %H:%M:%S").timestamp() for 子 in 訓練計劃表.計劃時間], dtype=numpy.int32)
	訓練計劃表 = 訓練計劃表.drop(["計劃時間"], axis=1)

	訓練表 = 訓練查詢表
	訓練表 = 訓練表.merge(訓練點擊表, on="會話標識", how="left")
	訓練表 = 訓練表.merge(訓練計劃表, on="會話標識", how="left")
	訓練表.點擊方式 = 訓練表.點擊方式.fillna(0)
	del 訓練查詢表
	del 訓練點擊表
	del 訓練計劃表
	gc.collect()

	print(str(datetime.datetime.now()) + "\t完成匯入資料")

	def 計算距離(經度甲, 緯度甲, 經度乙, 緯度乙):
		甲 = math.sin(math.pi * (緯度甲 - 緯度乙) / 360) ** 2
		乙 = math.sin(math.pi * (經度甲 - 經度乙) / 360) ** 2
		丙 = math.cos(math.pi * 緯度甲 / 180)
		丁 = math.cos(math.pi * 緯度乙 / 180)

		return 2 * 6378137 * math.asin((甲 + 乙 * 丙 * 丁) ** 0.5)

	測訓表 = pandas.concat([
		測試表.loc[:, ["會話標識", "用戶標識", "城市用戶標識", "起點", "終點", "起點經度", "起點緯度", "終點經度", "終點緯度", "城市", "請求秒序", "請求曜日", "請求日序", "請求時序", "計劃清單"]]
		, 訓練表.loc[:, ["會話標識", "用戶標識", "城市用戶標識", "起點", "終點", "起點經度", "起點緯度", "終點經度", "終點緯度", "城市", "請求秒序", "請求曜日", "請求日序", "請求時序", "計劃清單"]]
	]).reset_index(drop=True)

	測訓計劃表 = 測訓表[~測訓表.計劃清單.isna()].reset_index(drop=True)
	測訓計劃解析 = [json.loads(甲) for 甲 in 測訓計劃表.計劃清單]
	測訓計劃數 = [len(甲) for 甲 in 測訓計劃解析]
	測訓計劃解析 = [乙 for 甲 in 測訓計劃解析 for 乙 in 甲]
	測訓計劃表 = 測訓計劃表.loc[:, ["會話標識", "用戶標識", "城市用戶標識", "起點", "終點", "請求曜日", "請求日序", "請求時序"]].merge(pandas.DataFrame({
		"會話標識": pandas.Series([乙 for 甲 in range(len(測訓計劃數)) for 乙 in 測訓計劃數[甲] * [測訓計劃表.會話標識[甲]]], dtype=numpy.int32)
		, "計劃序號": pandas.Series([乙 for 甲 in 測訓計劃數 for 乙 in range(甲)], dtype=numpy.int32)
		, "反計劃序號": pandas.Series([甲 - 乙 for 甲 in 測訓計劃數 for 乙 in range(甲)], dtype=numpy.int32)
		, "距離":  pandas.Series([甲["distance"] for 甲 in 測訓計劃解析], dtype=numpy.int32)
		, "價格":  pandas.Series([甲["price"]  if 甲["price"] != "" else numpy.nan for 甲 in 測訓計劃解析]).fillna(0).astype(numpy.int32)
		, "預計到達時間":  pandas.Series([int(甲["eta"]) for 甲 in 測訓計劃解析], dtype=numpy.int32)
		, "計劃方式":  pandas.Series([int(甲["transport_mode"]) for 甲 in 測訓計劃解析], dtype=numpy.int16)
	}), on="會話標識")
	測訓方式0計劃表 = pandas.concat([
		測試表.loc[:, ["會話標識", "用戶標識", "城市用戶標識", "起點", "終點", "請求曜日", "請求日序", "請求時序"]]
		, 訓練表.loc[:, ["會話標識", "用戶標識", "城市用戶標識", "起點", "終點", "請求曜日", "請求日序", "請求時序"]]
	])
	測訓方式0計劃表["計劃序號"] = -1
	測訓方式0計劃表["反計劃序號"] = -1
	測訓方式0計劃表["距離"] = -1
	測訓方式0計劃表["價格"] = -1
	測訓方式0計劃表["預計到達時間"] = -1
	測訓方式0計劃表["計劃方式"] = 0
	測訓方式0計劃表 = 測訓方式0計劃表.astype({"計劃序號": numpy.int32, "距離": numpy.int32, "價格": numpy.int32, "預計到達時間": numpy.int32, "計劃方式": numpy.int16})
	測訓計劃表 = pandas.concat([測訓計劃表, 測訓方式0計劃表])
	del 測訓計劃解析
	del 測訓計劃數
	del 測訓方式0計劃表
	gc.collect()


	def 線下二取得統計資料表(鍵, 屬性 = []):
		某測訓統計資料表 = 測訓表.groupby(鍵).agg({"會話標識":"count", **{甲: "nunique" for 甲 in 屬性}}).reset_index()
		某測訓統計資料表 = 某測訓統計資料表.rename({"會話標識": "".join(鍵) + "之記錄數", **{甲: "".join(鍵) + "之" + 甲 + "數" for 甲 in 屬性}}, axis=1)
		for 子 in range(1, 12):
			前綴 = "".join(鍵) + "方式" + str(子)
			子表 = 測訓計劃表[測訓計劃表.計劃方式 == 子].groupby(鍵).agg({"會話標識": "nunique", **{甲: "nunique" for 甲 in 屬性}}).reset_index()
			子表.rename({"會話標識": 前綴 + "之記錄數", **{甲: 前綴 + "之" + 甲 + "數" for 甲 in 屬性}}, axis=1, inplace=True)
			某測訓統計資料表 = 某測訓統計資料表.merge(子表, on=鍵, how="left")
			某測訓統計資料表[前綴 + "之記錄比例"] = 某測訓統計資料表[前綴 + "之記錄數"] / 某測訓統計資料表["".join(鍵) + "之記錄數"]
		某測訓統計資料表 = 某測訓統計資料表.fillna(0)
		return 某測訓統計資料表

	測訓起點統計資料表 = 線下二取得統計資料表(["起點"], ["城市用戶標識"])
	測訓終點統計資料表 = 線下二取得統計資料表(["終點"], ["城市用戶標識"])
	測訓起點終點統計資料表 = 線下二取得統計資料表(["起點", "終點"], ["城市用戶標識"])
	測訓用戶標識統計資料表 = 線下二取得統計資料表(["城市用戶標識"], [])
	測訓用戶標識起點統計資料表 = 線下二取得統計資料表(["城市用戶標識", "起點"], [])
	測訓用戶標識終點統計資料表 = 線下二取得統計資料表(["城市用戶標識", "終點"], [])
	測訓用戶標識起點終點統計資料表 = 線下二取得統計資料表(["城市用戶標識", "起點", "終點"])

	def 取得第二統計資料表(鍵, 屬性=[]):
		某測訓第二統計資料表 = 測訓表.groupby(鍵).agg({"會話標識": "count", **{甲: "nunique" for 甲 in 屬性}}).reset_index()
		某測訓第二統計資料表 = 某測訓第二統計資料表.astype({"會話標識": numpy.float32, **{甲: numpy.float32 for 甲 in 屬性}})
		某測訓第二統計資料表.rename({"會話標識": "".join(鍵) + "之記錄數", **{甲: "".join(鍵) + "之" + 甲 + "數" for 甲 in 屬性}}, axis=1, inplace=True)
		某測訓第二統計資料表 = 某測訓第二統計資料表.fillna(0)
		return 某測訓第二統計資料表

	測訓請求日序資料表 = 取得第二統計資料表(["請求日序"], ["城市用戶標識", "起點", "終點"])
	測訓起點請求日序資料表 = 取得第二統計資料表(["起點", "請求日序"], ["城市用戶標識", "終點"])
	測訓終點請求日序資料表 = 取得第二統計資料表(["終點", "請求日序"], ["城市用戶標識", "起點"])
	測訓起點終點請求日序資料表 = 取得第二統計資料表(["起點", "終點", "請求日序"], ["城市用戶標識"])
	測訓用戶標識請求日序資料表 = 取得第二統計資料表(["城市用戶標識", "請求日序"], ["起點", "終點"])
	測訓用戶標識起點請求日序資料表 = 取得第二統計資料表(["城市用戶標識", "起點", "請求日序"], ["終點"])
	測訓用戶標識終點請求日序資料表 = 取得第二統計資料表(["城市用戶標識", "終點", "請求日序"], ["起點"])
	測訓用戶標識起點終點請求日序資料表 = 取得第二統計資料表(["城市用戶標識", "起點", "終點", "請求日序"])

	測訓請求時序資料表 = 取得第二統計資料表(["請求時序"], ["城市用戶標識", "起點", "終點"])
	測訓起點請求時序資料表 = 取得第二統計資料表(["起點", "請求時序"], ["城市用戶標識", "終點"])
	測訓終點請求時序資料表 = 取得第二統計資料表(["終點", "請求時序"], ["城市用戶標識", "起點"])
	測訓起點終點請求時序資料表 = 取得第二統計資料表(["起點", "終點", "請求時序"], ["城市用戶標識"])
	測訓用戶標識請求時序資料表 = 取得第二統計資料表(["城市用戶標識", "請求時序"], ["起點", "終點"])
	測訓用戶標識起點請求時序資料表 = 取得第二統計資料表(["城市用戶標識", "起點", "請求時序"], ["終點"])
	測訓用戶標識終點請求時序資料表 = 取得第二統計資料表(["城市用戶標識", "終點", "請求時序"], ["起點"])
	測訓用戶標識起點終點請求時序資料表 = 取得第二統計資料表(["城市用戶標識", "起點", "終點", "請求時序"])

	def 取得鄰資料表(鍵, 屬性 = []):
		某測訓鄰資料表 = 測訓表.loc[:, 鍵 + ["會話標識", "請求秒序", "起點經度", "起點緯度", "終點經度", "終點緯度"]]
		某測訓鄰資料表["請求序"] = 某測訓鄰資料表.groupby(鍵).請求秒序.rank()

		某測訓前鄰資料表 = 某測訓鄰資料表.loc[:, 鍵 + ["請求秒序", "起點經度", "起點緯度", "終點經度", "終點緯度", "請求序"]]
		某測訓前鄰資料表.rename({"請求秒序": "前鄰請求秒序", "起點經度": "前鄰起點經度", "起點緯度": "前鄰起點緯度", "終點經度": "前鄰終點經度", "終點緯度": "前鄰終點緯度"}, axis=1, inplace=True)
		某測訓前鄰資料表["請求序"] = 1 + 某測訓前鄰資料表.請求序
		某測訓後鄰資料表 = 某測訓鄰資料表.loc[:, 鍵 + ["請求秒序", "起點經度", "起點緯度", "終點經度", "終點緯度", "請求序"]]
		某測訓後鄰資料表.rename({"請求秒序": "後鄰請求秒序", "起點經度": "後鄰起點經度", "起點緯度": "後鄰起點緯度", "終點經度": "後鄰終點經度", "終點緯度": "後鄰終點緯度"}, axis=1, inplace=True)
		某測訓後鄰資料表["請求序"] = 某測訓後鄰資料表.請求序 - 1

		某測訓鄰資料表 = 某測訓鄰資料表.merge(某測訓前鄰資料表, on=鍵 + ["請求序"], how="left")
		某測訓鄰資料表 = 某測訓鄰資料表.merge(某測訓後鄰資料表, on=鍵 + ["請求序"], how="left")
		某測訓鄰資料表["".join(鍵) + "之前鄰請求秒差"] = abs(某測訓鄰資料表.請求秒序 - 某測訓鄰資料表.前鄰請求秒序).astype(numpy.float32)
		某測訓鄰資料表["".join(鍵) + "之後鄰請求秒差"] = abs(某測訓鄰資料表.後鄰請求秒序 - 某測訓鄰資料表.請求秒序).astype(numpy.float32)

		額外列名 = []
		if "起點" in 屬性:
			某測訓鄰資料表["".join(鍵) + "之前鄰起點距離"] = pandas.Series([計算距離(經度, 緯度, 前經度, 前緯度) for 經度, 緯度, 前經度, 前緯度 in zip(某測訓鄰資料表.起點經度, 某測訓鄰資料表.起點緯度, 某測訓鄰資料表.前鄰起點經度, 某測訓鄰資料表.前鄰起點緯度)], dtype=numpy.float32)
			某測訓鄰資料表["".join(鍵) + "之後鄰起點距離"] = pandas.Series([計算距離(經度, 緯度, 後經度, 後緯度) for 經度, 緯度, 後經度, 後緯度 in zip(某測訓鄰資料表.起點經度, 某測訓鄰資料表.起點緯度, 某測訓鄰資料表.後鄰起點經度, 某測訓鄰資料表.後鄰起點緯度)], dtype=numpy.float32)
			某測訓鄰資料表["".join(鍵) + "之前鄰起點距離比秒差"] = 	某測訓鄰資料表["".join(鍵) + "之前鄰起點距離"] / 某測訓鄰資料表["".join(鍵) + "之前鄰請求秒差"]
			某測訓鄰資料表["".join(鍵) + "之後鄰起點距離比秒差"] = 	某測訓鄰資料表["".join(鍵) + "之後鄰起點距離"] / 某測訓鄰資料表["".join(鍵) + "之後鄰請求秒差"]
			額外列名.extend(["".join(鍵) + "之前鄰起點距離", "".join(鍵) + "之後鄰起點距離", "".join(鍵) + "之前鄰起點距離比秒差", "".join(鍵) + "之後鄰起點距離比秒差"])

		if "終點" in 屬性:
			某測訓鄰資料表["".join(鍵) + "之前鄰終點距離"] = pandas.Series([計算距離(經度, 緯度, 後經度, 後緯度) for 經度, 緯度, 後經度, 後緯度 in zip(某測訓鄰資料表.終點經度, 某測訓鄰資料表.終點緯度, 某測訓鄰資料表.前鄰終點經度, 某測訓鄰資料表.前鄰終點緯度)], dtype=numpy.float32)
			某測訓鄰資料表["".join(鍵) + "之後鄰終點距離"] = pandas.Series([計算距離(經度, 緯度, 後經度, 後緯度) for 經度, 緯度, 後經度, 後緯度 in zip(某測訓鄰資料表.終點經度, 某測訓鄰資料表.終點緯度, 某測訓鄰資料表.後鄰終點經度, 某測訓鄰資料表.後鄰終點緯度)], dtype=numpy.float32)
			某測訓鄰資料表["".join(鍵) + "之前鄰終點距離比秒差"] = 某測訓鄰資料表["".join(鍵) + "之前鄰終點距離"] / 某測訓鄰資料表["".join(鍵) + "之前鄰請求秒差"]
			某測訓鄰資料表["".join(鍵) + "之後鄰終點距離比秒差"] = 某測訓鄰資料表["".join(鍵) + "之後鄰終點距離"] / 某測訓鄰資料表["".join(鍵) + "之後鄰請求秒差"]
			額外列名.extend(["".join(鍵) + "之前鄰終點距離", "".join(鍵) + "之後鄰終點距離", "".join(鍵) + "之前鄰終點距離比秒差", "".join(鍵) + "之後鄰終點距離比秒差"])

		某測訓鄰資料表 = 某測訓鄰資料表.loc[:, ["會話標識", "".join(鍵) + "之前鄰請求秒差", "".join(鍵) + "之後鄰請求秒差"] + 額外列名]
		某測訓鄰資料表 = 某測訓鄰資料表.fillna(-1)
		return 某測訓鄰資料表

	測訓用戶標識鄰資料表 = 取得鄰資料表(["城市用戶標識"], ["起點", "終點"])
	測訓用戶標識起點鄰資料表 = 取得鄰資料表(["城市用戶標識", "起點"], ["終點"])
	測訓用戶標識終點鄰資料表 = 取得鄰資料表(["城市用戶標識", "終點"], ["起點"])
	測訓用戶標識起點終點鄰資料表 = 取得鄰資料表(["城市用戶標識", "起點", "終點"])

	測訓會話資料表 = 測訓計劃表[測訓計劃表.計劃方式 != 0].groupby("會話標識").agg({"計劃方式": "count", "距離": "min", "價格": numpy.nanmin, "預計到達時間": "min"}).reset_index()
	測訓會話資料表.rename({"計劃方式": "計劃數", "距離": "最小距離", "價格": "最小價格", "預計到達時間": "最小預計到達時間"}, axis=1, inplace=True)
	for 子 in range(1, 12):
		前綴 = "方式" + str(子)
		子表 = 測訓計劃表[測訓計劃表.計劃方式 == 子].groupby("會話標識").agg({"計劃方式": "count", "計劃序號": "min", "反計劃序號": "min", "距離": "min", "價格": numpy.nanmin, "預計到達時間": "min"}).reset_index()
		子表.rename({"計劃方式": 前綴 + "之計劃數", "計劃序號": 前綴 + "之最小計劃序號", "反計劃序號": 前綴 + "之最小反計劃序號", "距離": 前綴 + "之最小距離", "價格": 前綴 + "之最小價格", "預計到達時間": 前綴 + "之最小預計到達時間"}, axis=1, inplace=True)

		測訓會話資料表 = 測訓會話資料表.merge(子表, on="會話標識", how="left")
		測訓會話資料表[前綴 + "之計劃數佔比"] = 測訓會話資料表[前綴 + "之計劃數"] / (1 + 測訓會話資料表.計劃數)
		測訓會話資料表[前綴 + "之最小距離差"] = 測訓會話資料表[前綴 + "之最小距離"] - 測訓會話資料表.最小距離
		測訓會話資料表[前綴 + "之最小價格差"] = 測訓會話資料表[前綴 + "之最小價格"] - 測訓會話資料表.最小價格
		測訓會話資料表[前綴 + "之最小預計到達時間差"] = 測訓會話資料表[前綴 + "之最小預計到達時間"] - 測訓會話資料表.最小預計到達時間
	for 子 in [1, 2, 7]:
		前綴 = "方式" + str(子)
		子表 = 測訓計劃表[測訓計劃表.計劃方式 == 子].groupby("會話標識").agg({"計劃序號": "max", "反計劃序號": "max", "距離": "max", "價格": numpy.nanmax, "預計到達時間": "max"}).reset_index()
		子表.rename({"計劃序號": 前綴 + "之最大計劃序號", "反計劃序號": 前綴 + "之最大反計劃序號", "距離": 前綴 + "之最大距離", "價格": 前綴 + "之最大價格", "預計到達時間": 前綴 + "之最大預計到達時間"}, axis=1, inplace=True)
		測訓會話資料表 = 測訓會話資料表.merge(子表, on="會話標識", how="left")
	測訓會話資料表 = 測訓會話資料表.fillna(-1)

	def 取得資料表(某表):
		if "點擊方式" not in 某表:
			某表["點擊方式"] = numpy.nan
		#某資料表 = 某表.loc[:, ["會話標識", "點擊方式", "用戶標識", "城市用戶標識", "起點", "終點", "起點經度", "起點緯度", "終點經度", "終點緯度", "起終距離", "請求秒序", "請求曜日", "請求日序", "請求時序", "計劃秒序"]]
		某資料表 = 某表.loc[:, ["會話標識", "點擊方式", "用戶標識", "城市用戶標識", "起點", "終點", "起點經度", "起點緯度", "終點經度", "終點緯度", "起終距離", "請求秒序", "請求日序", "請求時序", "計劃秒序"]]
		某資料表["請求計劃秒差"] = 某資料表.計劃秒序 - 某資料表.請求秒序
		某資料表["請求日之秒序"] = (某資料表.請求秒序 - 57600 - 14400) % 86400
		某資料表["計劃日之秒序"] = (某資料表.計劃秒序 - 57600 - 14400) % 86400

		某資料表 = 某資料表.merge(用戶表, on="用戶標識", how="left")
		某資料表 = 某資料表.merge(測訓起點統計資料表, on="起點", how="left")
		某資料表 = 某資料表.merge(測訓終點統計資料表, on="終點", how="left")
		某資料表 = 某資料表.merge(測訓起點終點統計資料表, on=["起點", "終點"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識統計資料表, on="城市用戶標識", how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點統計資料表, on=["城市用戶標識", "起點"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識終點統計資料表, on=["城市用戶標識", "終點"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點終點統計資料表, on=["城市用戶標識", "起點", "終點"], how="left")

		某資料表 = 某資料表.merge(測訓請求日序資料表, on=["請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓起點請求日序資料表, on=["起點", "請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓終點請求日序資料表, on=["終點", "請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓起點終點請求日序資料表, on=["起點", "終點", "請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識請求日序資料表, on=["城市用戶標識", "請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點請求日序資料表, on=["城市用戶標識", "起點", "請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識終點請求日序資料表, on=["城市用戶標識", "終點", "請求日序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點終點請求日序資料表, on=["城市用戶標識", "起點", "終點", "請求日序"], how="left")

		某資料表 = 某資料表.merge(測訓請求時序資料表, on=["請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓起點請求時序資料表, on=["起點", "請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓終點請求時序資料表, on=["終點", "請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓起點終點請求時序資料表, on=["起點", "終點", "請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識請求時序資料表, on=["城市用戶標識", "請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點請求時序資料表, on=["城市用戶標識", "起點", "請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識終點請求時序資料表, on=["城市用戶標識", "終點", "請求時序"], how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點終點請求時序資料表, on=["城市用戶標識", "起點", "終點", "請求時序"], how="left")

		某資料表 = 某資料表.merge(測訓用戶標識鄰資料表, on="會話標識", how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點鄰資料表, on="會話標識", how="left")
		某資料表 = 某資料表.merge(測訓用戶標識終點鄰資料表, on="會話標識", how="left")
		某資料表 = 某資料表.merge(測訓用戶標識起點終點鄰資料表, on="會話標識", how="left")

		某資料表 = 某資料表.merge(測訓會話資料表, on="會話標識", how="left")
		某資料表.drop(["用戶標識", "城市用戶標識", "起點", "終點", "請求日序", "請求時序", "請求秒序", "計劃秒序", "p11", "p18"], axis=1, inplace=True)

		return 某資料表

	測試資料表 = 取得資料表(測試表)
	訓練資料表 = 取得資料表(訓練表)

	print(str(datetime.datetime.now()) + "\t完成提取特征預備，共" + str(訓練資料表.shape[1]) + "欄")
	del 測試表
	del 訓練表
	del 測訓表
	del 用戶表
	del 測訓起點統計資料表
	del 測訓終點統計資料表
	del 測訓起點終點統計資料表
	del 測訓用戶標識統計資料表
	del 測訓用戶標識起點統計資料表
	del 測訓用戶標識終點統計資料表
	del 測訓用戶標識起點終點統計資料表

	del 測訓請求日序資料表
	del 測訓起點請求日序資料表
	del 測訓終點請求日序資料表
	del 測訓起點終點請求日序資料表
	del 測訓用戶標識請求日序資料表
	del 測訓用戶標識起點請求日序資料表
	del 測訓用戶標識終點請求日序資料表
	del 測訓用戶標識起點終點請求日序資料表

	del 測訓請求時序資料表
	del 測訓起點請求時序資料表
	del 測訓終點請求時序資料表
	del 測訓起點終點請求時序資料表
	del 測訓用戶標識請求時序資料表
	del 測訓用戶標識起點請求時序資料表
	del 測訓用戶標識終點請求時序資料表
	del 測訓用戶標識起點終點請求時序資料表

	del 測訓用戶標識鄰資料表
	del 測訓用戶標識起點鄰資料表
	del 測訓用戶標識終點鄰資料表
	del 測訓用戶標識起點終點鄰資料表

	del 測訓會話資料表

	for 列名 in 測試資料表.columns[16:]:
		if 列名.find("請求日序") >= 0 or 列名.find("請求時序") >= 0:
			測試資料表.loc[:, [列名]] = 測試資料表.loc[:, [列名]] / 測試資料表.loc[:, [列名]].mean()
			訓練資料表.loc[:, [列名]] = 訓練資料表.loc[:, [列名]] / 訓練資料表.loc[:, [列名]].mean()

	測試標籤表 = 測試資料表.loc[:, ["會話標識"]]
	測試資料表 = 測試資料表.drop(["會話標識", "點擊方式"], axis=1)
	測試資料表 = 測試資料表.astype({甲: numpy.float32 for 甲, 乙 in zip(測試資料表.dtypes.index, 測試資料表.dtypes) if 乙 == numpy.float64})
	測試資料表 = 測試資料表.astype({甲: numpy.int32 for 甲, 乙 in zip(測試資料表.dtypes.index, 測試資料表.dtypes) if 乙 == numpy.int64})
	訓練標籤表 = 訓練資料表.loc[:, ["會話標識", "點擊方式"]]
	訓練資料表 = 訓練資料表.drop(["會話標識", "點擊方式"], axis=1)
	訓練資料表 = 訓練資料表.astype({甲: numpy.float32 for 甲, 乙 in zip(訓練資料表.dtypes.index, 訓練資料表.dtypes) if 乙 == numpy.float64})
	訓練資料表 = 訓練資料表.astype({甲: numpy.int32 for 甲, 乙 in zip(訓練資料表.dtypes.index, 訓練資料表.dtypes) if 乙 == numpy.int64})

	with open(目錄 + "temp/test_plan", "wb") as 檔案:
		pickle.dump(測訓計劃表.loc[測訓計劃表.請求日序 >= 0, ["會話標識", "計劃方式"]], 檔案)
	with open(目錄 + "temp/test_label", "wb") as 檔案:
		pickle.dump(測試標籤表, 檔案)
	with open(目錄 + "temp/test_data", "wb") as 檔案:
		pickle.dump(測試資料表, 檔案)
	del 測試標籤表
	del 測試資料表
	gc.collect()

	print(str(datetime.datetime.now()) + "\t訓練開始")

	for 子 in range(12):
		訓練方式子標籤表 = 訓練標籤表.merge(測訓計劃表.loc[測訓計劃表.計劃方式 == 子, ["會話標識"]].drop_duplicates(), on="會話標識", right_index=True)
		訓練方式子標籤表["標籤"] = (訓練方式子標籤表.點擊方式 == 子).astype(numpy.int)

		訓練方式子資料表 = 訓練資料表.loc[訓練方式子標籤表.index.tolist()]
		訓練方式子資料集 = lightgbm.Dataset(訓練方式子資料表, 訓練方式子標籤表.標籤)
		del 訓練方式子資料表
		gc.collect()

		輕模型 = lightgbm.train(train_set=訓練方式子資料集
			, params={"objective": "binary", "learning_rate": 0.05, "max_depth": 6, "num_leaves": 127, "bagging_fraction": 0.7, "bagging_freq": 1, "bagging_seed": 0, "verbose": -1}
			, num_boost_round=500
		)

		with open(目錄 + "model/" + str(子), "wb") as 檔案:
			pickle.dump(輕模型, 檔案)
		print(str(datetime.datetime.now()) + "\t" + str(子))
		del 訓練方式子資料集
		del 訓練方式子標籤表

	del 訓練標籤表
	del 訓練資料表

	print(str(datetime.datetime.now()) + "\t訓練結束")

train()
